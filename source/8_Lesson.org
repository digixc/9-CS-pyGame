#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Pygame
#+AUTHOR: Stephen Fone

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/9-CS-Pygame">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li> 
      <li><a href="5_Lesson.html">Week5</a></li>   
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="7_Lesson.html">Week7</a></li>
      <li><a href="8_Lesson.html">Week8</a></li>
      <li><a href="9_Lesson.html">Week9</a></li>  
      <li><a href="assessment.html">Assessment</a></li>
    </ul>
  </div>


<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>

#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing *Programming and Development* (learning strand), specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Understand the concept of Sprites and how they can used as game objects.
- Understand and use variables to change to keep track of the X and Y coordinates of a sprite.
- Understand the process of painting the screen with image(s) known as Bit Blitting or Blit.
- Understand that Event Handlers can be used to perform an action detected by an Event Listener.
* Pythagoras
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:
- Now that we've learnt some cool coding techniques, we can try and bring them all together to create a nice target shooting game like this:
#+BEGIN_HTML
<iframe width="420" height="315" src="https://www.youtube.com/embed/G7T_j9nAHBs" frameborder="0" allowfullscreen></iframe>
#+END_HTML
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- *Pythagoras* invented his theorem in ancient Greek times so we could make video games.
- You may remember this from your maths classes:
[[./img/8-1.png]]
- Given the lengths of a and b we are able to calculate the length of c using the equation above.
** Download It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Start by downloading the template for this lesson:
- [[./doc/pygameDevTemplate.py][Right click and Save As - for a fresh template]]
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- First we'll need some graphics for our game. At the very least, we'll need to load a player and target image.
- *Save the two images* below into your *pyGame folder* on your H: drive.
- To keep things neat, *make a sub-folder* in your pyGame folder and call it *img*. Put both images in there. *NOTE:* If you don't place them into the sub-folder, the code examples used in this lesson won't work.
[[./img/bird1.png]]
[[./img/crossHair.png]] 
- We'll start off by establishing the target's starting *X* and *Y* position on the screen. Add these lines just before your game loop, around line 18:
#+begin_src python 
gameState = "running"  # controls which state the games is in
player1Image = pygame.image.load("img/crossHair.png")
targetImage = pygame.image.load("img/bird1.png")
targetX = 100
targetY = 100
#+end_src
- It should look like this:
[[./img/8-2.png]]
- Using the ideas used in lesson 3 mouse events, we'll have the target graphic follow the mouse cursor around the screen. Add the following lines into your game loop, around line 30.
- *NOTE:* This code must be indented in order to work:
#+begin_src python 
screen.fill(white)
mousePos = pygame.mouse.get_pos()
player1X = pygame.mouse.get_pos()[0] - 50
player1Y = pygame.mouse.get_pos()[1] - 50

target = screen.blit(targetImage, (targetX, targetY))
player1 = screen.blit(player1Image, (player1X, player1Y))
#+end_src
[[./img/8-3.png]]
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- In our game, we'll need to know when the *player* has 'hit' the *target bird*. 
- We'll draw an imaginary circle around the bird's X, Y coordinates and say that when the player clicks the mouse, if the mouse is inside the circle, they've hit the target. 
- We could also use the idea of how close the player is to the middle to decide their accuracy.
- You've almost certianly covered Pythagoras' theorem in maths, but how does it help us solve this problem?
[[./img/8-4.png]]
- Look at the diagram above for a moment. We can use the variables we already have to establish the X and Y distance from the bird to the target, then apply Pythagoras to see how far away it is. 
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- In order to keep the game loop as tidy as possible we will create a function to calculate *c*. 
- The function will need to use the math module's square root method. This isn't built into Python by default, so some extra code in the form of the *math* module must be imported. 
- Add the following lines to the top of your program, around line 4:
#+begin_src python 
import math

def pythag(pX, pY, tX, tY):
    a = pX - tX
    b = pY - tY
    c = math.sqrt(a ** 2 + b ** 2)
    print (c)
#+end_src
[[./img/8-5.png]]
- Finally, we must call the function and send it the player's and target's *X* and *Y* positions to perform the calculation with. Add this code inside the game loop, near line 44.
- *NOTE:* This code must also be indented in order to work:
#+begin_src python 
pythag(player1X, player1Y, targetX, targetY)
#+end_src
[[./img/8-6.png]]
- Now test your code. Look at the bottom of the pyGame shell window. What is this telling you?
- If you're struggling with the concepts, this video tutorial will help with this lesson:
#+BEGIN_HTML
<iframe width="650" height="393" src="https://www.youtube.com/embed/9yDunCtTTJw" frameborder="0" allowfullscreen></iframe>
#+END_HTML
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- *Silver:* Add comments explaining your code, then upload it for marking.
- *Gold:* Use the function from the 'Text me' lesson to display how accurate the player was.
- *Platinum:* Use Pygame.draw.line to draw the 3 sides of the triangle, like in the screenshot below.
[[./img/8-pythanFinished.png]] 
