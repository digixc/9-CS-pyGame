#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>

#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Pygame
#+AUTHOR: Stephen Fone

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/9-CS-pyGame">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="7_Lesson.html">Week7</a></li>
      <li><a href="8_Lesson.html">Week8</a></li>
      <li><a href="9_Lesson.html">Week9</a></li>
      <li><a href="assessment.html">Assessment</a></li>
    </ul>
  </div>


<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>

#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing *Programming and Development* (learning strand), specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Understand the concept of *Sprites* and how they can used as game objects.
- Understand and use variables to change to keep track of the X and Y coordinates of a sprite.
- Understand the process of detecting collisions.
- Understand how to use the random function to generate a random sprite target.
* Collision!
 :PROPERTIES:
 :HTML_CONTAINER_CLASS: activity
 :END:
- Open your Week5.py file from lesson 5 in pyGame. It should be in your home drive, stored in your Year 9 Game Development folder. 
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- We are going to make a *simple game* and learn to use *collisions*. 
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- In addition to the sprite we made in the previous lesson, we will create another sprite using a basic shape called *target*. We will then detect if *player1* has collided with the *target*.
- First we need a *variable* to *hold* the *x* and *y position* of the *target*.
- Add these lines at the bottom of the lines of the game setup section, directly underneath the line that says: *player1Image=pygame.transform.scale(player1Image, player1ImageSizeXY)* which you wrote in the last lesson. It'll be around line 20. 
#+begin_src python
pygame.mouse.set_visible(False)
targetXY = [500, 500]
#+end_src
- Your code will look a little like this now:
[[./img/6-1.png]]
- Next, we will draw the target sprite onto the screen.
- Add the following lines of code in your game loop, directly underneath the line that says: *player1XY=newXPosition, newYPosition* 
- *NOTE:* You'll need to *indent each of these lines twice*, to that they're part of the *FOR* event loop.
#+begin_src python
target = pygame.draw.circle(screen, red, (300, 600), 20)
if player1.colliderect(target):
    print("Hit!")
#+end_src
- The code should look like this:
[[./img/6-2.png]]
- Run the code, and see what happens? 
- Printing 'hit' in the console is not very exciting. Let's change the code so the target disappears and reappears at a random *x* and *y* position when touched by the player sprite.
- In order to use the random numbers, we need to *import* some extra code to allow it.
- Add this line at the very top of your program:
#+begin_src python
import random
#+end_src
It'll look like this:
[[./img/6-3.PNG]]
 - Next, we can use a new function called: *random.randint()* to create random numbers for the *x* and *y* postions of the target. Comment out the *print("hit")* line you wrote previously by
   placing a hash symbol *(#)* in front of it.
- Then add the following lines underneath. Don't forget that they're part of the *IF* block, so will *need* to be *indented* with the tab key *three times*.
#+begin_src python
targetXY[0] = random.randint(0, SCREENWIDTH)
targetXY[1] = random.randint(0, SCREENHEIGHT)
#+end_src
- We will also need to stop hard-coding the coordinates of our target, and start using the new randomly chosen coordinates. A few lines above where you made these changes, find the line that says:
#+begin_src python
target = pygame.draw.circle(screen, red, (300, 600), 20)
#+end_src
- Change it to say:
#+begin_src python
target = pygame.draw.circle(screen, red, targetXY, 20)
#+end_src
- The code should look a little like this (/the line numbers won't be exact, but will be in this area of the program/):
[[./img/6-4.png]]
** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:
- Run the program to test it. 
- There are a number of improvements we can make.
- It would be better if the user had to *collide with the target* and *click the mouse to score a point*. We could add this by changing our collision code slightly. 
- Add another *IF* statement inside the game loop to force the user to click on the target. *NOTE:* Only the first line below is to be added; the others are shown to help you see where to place the code, and help ensure it is indented correctly. 
#+begin_src python
if pygame.mouse.get_pressed()[0] == 1:
    if player1.colliderect(target):
        # print("Hit!")
        targetXY[0] = random.randint(0, SCREENWIDTH)
        targetXY[1] = random.randint(0, SCREENHEIGHT)
#+end_src
- The code should look something like this. *NOTE:* The lines of code under the new *IF* statement will all need to be intended.
[[./img/6-5.png]]
- This new feature also introduces a *bug*; the /player can hold down the mouse button constantly/, so that they just have to touch the target.
- This is slightly more complex to fix. We'll need to create a variable to prevent the player from 'firing' again until until the mouse button is released.
  - Create the *fireLock* variable and set to: *0* at the start of the game, so the player can fire. Add this line of code just before your game loop:
#+begin_src python
fireLock = 0
#+end_src
  - So it looks like this:
 [[./img/6-6.PNG]]
  - Next, we'll need to set: *fireLock* to: *1* when the mouse button is pushed, by modifying our *IF* statement from before a little bit. 
  - Find the line that says:
#+begin_src python
if pygame.mouse.get_pressed()[0] == 1:
#+end_src
  - Change it to:
#+begin_src python
if pygame.mouse.get_pressed()[0] == 1 and fireLock == 0:
    fireLock = 1
#+end_src
  - The code should now look something like this:
 [[./img/6-7.PNG]]
  - Finally, we'll need to make it so that we only reset: *fireLock* to *0* when the mouse button is released. We do this by adding another event listener to our event loop.
  - Add this *IF* statement inside the: *gameState = "exit"* line in your game loop.
#+begin_src python
if event.type == pygame.MOUSEBUTTONUP:
    fireLock = 0
#+end_src
- It should look like this when done:
[[./img/6-8.PNG]]
- If you find yourself unsure of how to complete this lesson, this video tutorial may help:
#+BEGIN_HTML
<iframe width="650" height="393" src="https://www.youtube.com/embed/p095HXXKNLc" frameborder="0" allowfullscreen></iframe>
#+END_HTML
** Badge Tasks
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:      
- *Silver:* Add comments to your code and in comments below your code.
- *Gold:* The target is currently drawn over the top of the player - Fix this bug so that it appears behind. 
- *Platinum:* Change the target circle to an image of your choice instead.


** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- Be honest and take the quiz below to assess your own progress. Your teacher will randomly check some students work to moderate their marking.
- Once you have done above tasks and tested they are working as intended, click [[https://www.bournetolearn.com/quizzes/y9-gameDev/Lesson_6][here]] for the self assessment.
