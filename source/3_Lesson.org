
#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Pygame
#+AUTHOR: Stephen Fone

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/9-CS-pyGame">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="7_Lesson.html">Week7</a></li>
      <li><a href="8_Lesson.html">Week8</a></li>
      <li><a href="9_Lesson.html">Week9</a></li>
      <li><a href="assessment.html">Assessment</a></li>
    </ul>
  </div>

<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>

#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing *Programming and Development* (learning strand), specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Understand and be able to use *Interrupt Events* to interact with a game.
- Understand that *Event Listeners* can be used to check if an action has been performed.
- Understand that *Event Handlers* can be used to perform an action detected by an *Event Listener*.
* Mouse Events
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Download It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Start by picking up a template to use in this lesson: 
- [[./doc/pygameDevTemplate.py][Right click and save as - for a fresh template]]
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- All games have interaction with the user, in computing these are known as *Interrupt Events*.
- The code that checks if the user has done something is called an *Event Listener*.
- When a specific event is heard by the Event Lister, an action is then performed by the *Event Handler* code.
- If we look carefully at the template you will see that the event of the user closing the window is already handled.
- We'll add some more event handlers in this lesson, to make our game more interactive.
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Add the *print(event)* statement to your code:
- [[./img/3-1.PNG]]
- Run your code with *Shift-F10*, then move the mouse around inside the pyGame window and press some keys on the keyboard.
- Look in the *shell/interpreter window*, located in the bottom section of the Thonny window or in the terminal window for Python IDLE.
- You might see output like this:
#+begin_src
<Event(2-KeyDown {'mod': 0, 'unicode': '', 'scancode': 56, 'key': 308})>
<Event(3-KeyUp {'mod': 0, 'key': 308, 'scancode': 56})>
#+end_src
- Try holding the CTRL, ALT or SHIFT keys while pushing other keys. The interpreter window output will now change slightly to show that the keys have been *modified*. 


- *NOTE:* *KeyUp* and *KeyDown* are different events. What's the difference?
* Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
- *Silver:* Copy and paste the lines from the Thonny/Python console in the bottom window which show the events returned for the following:
   - Right mouse button clicked/released.
   - Mouse wheel clicked/released.
   - Mouse wheel spin up/down.
   - Left mouse button pressed/released.
   - Pressing the X to close the window.
   - Up arrow press.
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- We will make a sprite called *player1* follow the mouse. Add these lines of code to your game loop.
- *Note:* Make sure you use tab to double-indent the code so that it sits inside the *for* loop. 
#+begin_src python
screen.fill(black)
mousePosition = pygame.mouse.get_pos()
print(mousePosition)
#+end_src
- The code will look like this:
[[./img/3-2.PNG]]
- Look at the Thonny/Python terminal window and move the mouse. 
- This is the data we will use to position the *player1* sprite.
- Modify your game loop to the following:
#+begin_src python
screen.fill(black)
mousePosition = pygame.mouse.get_pos()
# print(mousePosition)   <<< UMCOMMENT THIS TO SEE POSITION DATA.
player1X = mousePosition[0]
player1Y = mousePosition[1]
player1 = pygame.draw.rect(screen, red, (player1X, player1Y, 40, 40))
#+end_src
- The code will look like this:
[[./img/3-3.PNG]]
- Run the program with *Shift-F10*. What happens?
- If you're struggling with the tasks, you can go through the notes above using this video tutorial:
#+BEGIN_HTML
<iframe width="650" height="393" src="https://www.youtube.com/embed/jkM4VFE98Vo" frameborder="0" allowfullscreen></iframe>
#+END_HTML
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- *Gold* The *player1* sprite isn't in the centre of the mouse pointer. Fix this bug and comment each line of your code to explain what it does.
- *Platinum:* You've now covered mouse movement. Modify your code so a different shape is drawn on left or right mouse button clicks.


- /Hint:/ There's a few ways to do the platinum task. You can look online and find a way to do it, or these lines could perhaps be recycled into something useful.
#+begin_src python
if pygame.mouse.get_pressed()[0] == True:
    pygame.draw.rect(screen, green, (100, 100, 100, 100))
elif pygame.mouse.get_pressed()[1] == True:
    print("You clicked a different button")
#+end_src
