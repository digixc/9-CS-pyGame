#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Pygame
#+AUTHOR: Stephen Fone

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/9-CS-pyGame">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="7_Lesson.html">Week7</a></li>
      <li><a href="8_Lesson.html">Week8</a></li>
      <li><a href="9_Lesson.html">Week9</a></li>
      <li><a href="assessment.html">Assessment</a></li>
    </ul>
  </div>


<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>

#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing *Programming and Development* (learning strand), specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Understand and use Sprites, images and sound files for our game objects.
- Understand and use variables to change to keep track of the X and Y coordinates of a sprite/image.
- Understand the process of painting the screen with image(s) known as Bit Blitting or Blit.
- Understand that Event Handlers can be used to perform an action detected by an Event Listener.
- Understand and use of outputting text to the screen.
- Understand and use *selection*, i.e. using *if-else, if-elif*, to branch the flow of an action.
* Stage fright
 :PROPERTIES:
 :HTML_CONTAINER_CLASS: activity
 :END:
** Save It
SCHEDULED: <2016-05-08 Sun>
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:
- Download and save the [[./doc/pygame_StagesTemplate.py][Stages Template]]. Please note this is a different template to all previous lessons.
- You'll also need some assets for your game:
- Download this [[./doc/Laser_Cannon.ogg][sound file]] and save it to your Images folder.
- Download this [[./img/Bourne_Town_Hall.jpg][background image]] and save it to your Images folder.
- Download this [[./img/b1.png][sprite file]] and alo save it to your Images folder.
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- In order for your game to look like a real game we’ll need to have several states for it to exist in.
- The game will have *3 states* - /splash, playing and game over/.
- *Splash:*
  - Opening image
  - Title
  - Instructions
  - Reset game specific variables e.g. score
  - Capture start time – for the timer

- *Playing:*
  - The actual game we’ve been creating

- *Game Over:*
  - Displays players results e.g. score / average distance from target
  - Option to restart game
** Build It - Setup
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:
- Before the game loop begins we need to setup the font, images and sounds.
- This is done before the game loop as it only needs to be done once.

[[./img/9-1.png]]
- You may need to change the file names for your player, target and background images.
#+begin_src python
# loads font, images and sounds
fontName = pygame.font.match_font('arial')
BGImage = pygame.image.load("Images/Bourne_Town_Hall.jpg")
player1Image = pygame.image.load("Images/crossHair.png")
targetImage = pygame.image.load("Images/b1.png")
gunSound = pygame.mixer.Sound("Images/Laser_Cannon.ogg")

# resize images
player1ImageWidthHeight = [100, 97]  # set size for player sprite
player1Image = pygame.transform.scale(player1Image, player1ImageWidthHeight)  # modifies size of image
targetImageWidthHeight = [41, 50]
targetImage = pygame.transform.scale(targetImage, targetImageWidthHeight)

targetXY = [500, 500]  # sets target start position

#+end_src
* Build It - Splash
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:      
- Next we will add the game specific variables to the splash stage so they can be reset at the beginning of each new game. 
-  The state change to the playing state is triggered by the left mouse click.
[[./img/9-2.png]]

#+begin_src python
            # set start game variables
            startTime = pygame.time.get_ticks()
            fireLock = 0
            score = 0
            hitList = []
            distanceList = []
#+end_src
- The *hitList* is used to score the X and Y coordinates of each successful hit on the target.
- The *distanceList* is used to store the distance from the centre of the target for each successful hit.
- Both of these are used in the game over state to inform the user of their performance.

* Build It - Playing
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:
- The playing state contains the game code we have written.
[[./img/9-3.png]]
#+begin_src python
pygame.mouse.set_visible(False)  # hide mouse cursor
        screen.blit(BGImage, (0, 0))  # draw background image
        mousePosition = pygame.mouse.get_pos()
        target = screen.blit(targetImage, targetXY)
        player1XY = mousePosition[0] - player1ImageWidthHeight[0] / 2, mousePosition[1] - player1ImageWidthHeight[1] / 2
        player1 = screen.blit(player1Image, player1XY)
        distance = pythag(player1XY[0], player1XY[1], targetXY[0], targetXY[1])

        if pygame.mouse.get_pressed()[0] == 1 and fireLock == 0:  # player fires
            gunSound.play()
            fireLock = 1
            if player1.colliderect(target):  # when the target is hit
                targetXY[0] = random.randint(0, SCREENWIDTH - 50)  # new target X
                targetXY[1] = random.randint(0, SCREENHEIGHT - 50)  # new target Y
                score += 1  # add to score
                hitList.append([int(player1XY[0]), int(player1XY[1])])
                distanceList.append(distance)

        # draw text to screen
        textDraw("distance: " + str(int(distance)), (SCREENWIDTH / 2 - 100, 10), black)
        textDraw("Score: " + str(score), (SCREENWIDTH / 2 - 100, 40), black)
        textDraw("Time: " + str( pygame.time.get_ticks() - startTime), (SCREENWIDTH / 2 - 100, 70), black)

        if pygame.time.get_ticks() - startTime > 10000:  # end game after 10 seconds
            gameState = "gameOver"
#+end_src
- The state change to the game over state is triggered by a timer. 

* Build It - Game Over
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:
- The game over state displays the players score, average distance of each hit.  The location of each hit and its distance are drawn to the screen.
[[./img/9-4.png]]
#+begin_src python
        screen.fill(black)
        pygame.mouse.set_visible(True)
        for h in range(0, len(hitList) - 1):  # for each hit....
            pygame.draw.circle(screen, red, hitList[h], 30)
            textDraw(str(int(distanceList[h])), (hitList[h][0] + 20, hitList[h][1] + 20), red)
            textDraw("Score: " + str(score), (10, 40), green)
            avDistance = sum(distanceList) / len(distanceList)
            textDraw("Average distance: " + str(int(avDistance)), (10, 100), green)
        textDraw("Right click to play again", (400, 400), green)
        if pygame.mouse.get_pressed()[2]:
            gameState = "splash"
#+end_src
- The state change back the splash stage is triggered by a right mouse click.
** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:
- Try running your program.
- If it doesn't work, some possible explanations are:
  - Images or sound files in the wrong location or the files names do not match.
  - Levels of indentation are incorrect.
- The video tutorial below walks you through building the finished game:
#+BEGIN_HTML
<iframe width="650" height="393" src="https://www.youtube.com/embed/xg9UIrildXI" frameborder="0" allowfullscreen></iframe>
#+END_HTML
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:      
- *Silver:* The code uses something called a *list* to store the players moves. Read the first half of [[https://bournetocode.com/projects/8-CS-TextGames/pages/3_2015Lesson.html][these]] online notes about lists, then write a short piece in a text file (/e.g. using Notepad/) to explain what a list is.
- *Gold:* Add a background image and some additional text to the splash screen section of the code, and upload a screenshot of the new splash screen to collect the badge.
- *Platinum:* Modify the game to use your own sprites, backgrounds and sounds, by looking around online. Upload screenshots of your revised game, and the .py file and your new assets to collect the badge. 
