#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Pygame
#+AUTHOR:Oliver Drayton,  X Ellis, Stephen Fone

#+BEGIN_EXPORT html
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/9-CS-Pygame">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li> 
      <li><a href="5_Lesson.html">Week5</a></li>  
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="7_Lesson.html">Week7</a></li>
      <li><a href="8_Lesson.html">Week8</a></li>
      <li><a href="9_Lesson.html">Week9</a></li>   
      <li><a href="assessment.html">Assessment</a></li>
    </ul>
  </div>



<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>

#+END_EXPORT
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing *Programming and Development* (learning strand), specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Understand the concept of *selection*, i.e. using *if-else, if-elif*, to branch the flow of action
- Understand that variables can be changed to reflect/keep track of the state (position, colour etc) of a game object
- Understand that *game animation* is implemented using *repetition* and game object states changing.

* Move it!
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Download It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Start by picking up the template for this lesson:
- [[./doc/pygameDevTemplate.py][Right click and Save As - for a fresh template]]
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Previously, we looked at drawing simple elemental shapes. 
- In this lesson, we are going to look at ways to draw shapes, then animate them.
- *We will will need to perform the following steps:*
  - *Setup variables* to store *x* and *y* coordinates for our graphic.
  - *Draw* the a shape over at *player1X*, *player1Y*
  - *Change* the variables a bit.
  - *Repeat* the draw/change process repeatedly.
- If you get stuck today, a walk-through of the steps described below can be seen here:
#+BEGIN_HTML
<iframe width="650" height="393" src="https://www.youtube.com/embed/TfdHz3yRTy8" frameborder="0" allowfullscreen></iframe>
#+END_HTML
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- At the end of the *game setup* area of the code, underneath the *gameState = running* line, create a variable *player1X* and *assign* it the *value of 0*.
- This line of code will happen once when the program first starts up. 
#+begin_src python
player1X = 0
#+end_src
- It should look like this:
[[./img/2-1.PNG]]
- Next, we'll need to add some code to the main game loop. Expressed as pseudocode, we'll be doing:
#+begin_src
START REPEAT
    Draw a small square at coordinates: player1X, 200.
    Add 4 to the value of player1X
END REPEAT
#+end_src
- Add the following lines of code to draw our player in the game loop and increment the *X* position by *4 pixels* /every time the game loop runs./
- Place the following lines of code immediately under the *#your code starts here* line. 
- *NOTE:* You must ensure you use the *tab* key to indent these lines of code, otherwise it won't run.
#+begin_src python
player1 = pygame.draw.rect(screen, green, (player1X, 200, 20, 20))
player1X = player1X + 4
#+end_src
- When done, this will look like this:
[[./img/2-2.PNG]]
** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:
- Did this work as expected? Discuss what you think has happened?
** Try It:
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Perhaps this line can help - It fills the whole screen with solid colour, which would cover any previous images we've drawn. 
#+begin_src python
screen.fill(black)
#+end_src
- You'll now have something like this:
- [[./img/2-3.PNG]]
- See if you can add this in the right place in our game loop to create a green square that drifts across the screen. 
- Can you make it move more slowly? Faster? Render as a different colour? 
- Could you change the code to make it move down instead of up? 
- What about to move diagonally down and right across the screen?
- What about making it start in the bottom-left corner and making it travel up and to the right?
* Selection
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- *Selection* is one of the *three basic logic structures* in computer programming. The other two logic structures are *sequence* and *iteration*
- *In a selection structure*, a question is asked, and depending on the answer, the program takes certain courses of action, after which the program moves on to the next event
- Humans might see selection like this:
[[./img/2-4.png]]
- Computers see things like this:
[[./img/2-5.png]]
- We are going to use value of the *player1X* variable to determine if *player1* has moved off the screen. This translates into python code as *if* statement.
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Modify your code in the game loop to say this:
#+begin_src python
screen.fill(black)
player1 = pygame.draw.rect(screen, green, (player1X, 200, 20, 20))
player1X = player1X + 4

# selection: depending on the outcome of this comparison, 
# player1X will be set to 0 or not
if player1X > SCREENWIDTH:
    player1X = 0
#+end_src
- Your code should look like this:
[[./img/2-6.PNG]]
- Run your code. What do the new lines do? 
- Could you make the square move right to left instead?
- How about repeatedly moving in diagonal lines?
** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- *Using conditionals* (/IF statements/) will allow us to make far better graphics. 
- For instance instead of making the player reappear repeatedly on the same edge, lets make him bounce from edge to edge.
- We will need to *create a variable* to hold the *speed* and *direction* of the player – this must be done before at the loop, in the *game setup* section of the page at the top of the program. Put it directly underneath where you initially wrote the *player1X = 0* line at the start of this page. You should end up with:

#+begin_src python
player1X = 0
player1XSpeed = 4
#+end_src
- Your code should look like this:
[[./img/2-7.PNG]]
- We will also need to change the *player1X = player1X + 4* line and *if* statement slightly in the game loop:

#+begin_src python
screen.fill(black)
player1 = pygame.draw.rect(screen, green, (player1X, 200, 20, 20))
player1X = player1X + 4

if player1X > SCREENWIDTH:
    player1X = 0
#+end_src

- ...needs to be changed to say...
#+begin_src python
screen.fill(black)
player1 = pygame.draw.rect(screen, green, (player1X, 200, 20, 20))
player1X = player1X + player1XSpeed

if player1X > SCREENWIDTH:
    player1XSpeed  = player1XSpeed * -1 
#+end_src
- It'll look like this: 
[[./img/2-8.PNG]]
- Which two lines have changed? Why?
- What is needed to make the shape bounce off the left-hand edge of the window too?
- Can you change the size of the window? 
- Can you make the square travel only half-way accross the screen before reversing direction?
- Can you make the square bounce up and down?
- Does it have to be a square?
- Could it be green travelling one way, but red travelling the other?
** Badge Tasks
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- *Silver:* Add comments to all of your code, and upload for marking. 
- *Gold:* Make a piece of animation. Create a circle that:
  - Appears at  x = 100, y = 100
  - Moves to x = 100, y = 700
  - Re-appears at x = 100, y = 100  (*hint: use selection to decide if the circle has reached 700 at y direction*)
- *Platinum:* Make a shape move diagonally and bounce off all the sides of the screen.

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- For this lesson’s assessment you are marking your own work. This will allow you see your own progress. This process is often used for online training programmes and is called the ‘honour’ or ‘trust system’. Obviously the key to these systems is being honest. Your teacher will randomly check some students work to moderate their marking.
- Once you have done above tasks and tested they are working as intended, click [[https://www.bournetolearn.com/quizzes/y9-gameDev/Lesson_2][here]] for the self assessment.
