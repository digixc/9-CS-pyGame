#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>

#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:nil creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Pygame
#+AUTHOR: Stephen Fone

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/stsb11/9-CS-pyGame">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="7_Lesson.html">Week7</a></li>
      <li><a href="8_Lesson.html">Week8</a></li>
      <li><a href="9_Lesson.html">Week9</a></li>
      <li><a href="assessment.html">Assessment</a></li>
    </ul>
  </div>

<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>

#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing *Programming and Development* (learning strand), specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Understand the concept of *Sprites* and how they can used as game objects.
- Understand and use variables to change to keep track of the X and Y coordinates of a sprite.
- Understand the process of painting the screen with image(s) known as *Bit Blitting* or *Blit*.
- Understand how to use X, Y coordinates to position and re-size a sprite.
* Images
 :PROPERTIES:
 :HTML_CONTAINER_CLASS: activity
 :END:
** Download It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:
- Start by picking up a fresh copy of the pyGame template file to use in this lesson, and save it in the directory you've been using for this topic: 
- [[./doc/pygameDevTemplate.py][Right click and save as - for a fresh template]]
- Create a folder called *Images* in your pygame folder.
- Right click on the image below and save it in your new *Images* folder
[[./img/gimp2.png]]
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Basic shapes is a good starting point, but images are much more fun.
- Using images as [[https://en.wikipedia.org/wiki/Sprite_(computer_graphics)][sprites]] is very simple in pyGame.
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- The process for using an image in pyGame is as follows:
#+begin_src
Load the image into memory
Create a variable to hold the sprite's X and Y position on the screen

BEGIN GAME LOOP
    Set new X and Y coordinates for the image
    Display the image on the screen
#+end_src

- The graphic(s) we wish to load only need to be loaded into the computer's memory once. 
- If we loaded the file from the computer's hard drive 60 times a second, we would get very poor game performance.
- The process of painting the screen with our loaded image(s) is called /bit blitting/, or just '[[https://en.wikipedia.org/wiki/Bit_blit][blit]]' for short. 
- Start by adding this code above the *gameState = running* line.
#+begin_src python
player1Image = pygame.image.load("gimp2.png")
player1XY = [100, 100]
#+end_src

- Then add these lines under *# your code starts here* to display (blit) the image on the screen:
- *NOTE:* Make sure these lines are *double-indented*, otherwise they won't work.
 #+begin_src python
    screen.fill(black)
    player1 = screen.blit(player1Image, player1XY)
#+end_src
- We now have a static image. To make it a little more interactive, let's  make the sprite follow the mouse. Weâ€™ve done this before but we are going to improve our method. 
- Add these two line underneath the *player1 = screen.blit(player1Image, player1XY)* line (/Don't forget to double-indent!/):
#+begin_src python
    mousePosition = pygame.mouse.get_pos()
    player1XY = mousePosition[0], mousePosition[1] 
#+end_src
- What do you think this is doing?
- Your code will now look something like this:
[[./img/5-3.png]]
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:
- Our game is coming along, but we've a few improvements that are needed to make this better.
  - The mouse cursor isn't centred on the image,
  - The mouse cursor is visible, which looks unsightly,
  - The image is a little large. 
- Let's deal with the re-sizing of the image first. We can handle this at the top of our program, before we start our game loop. Our method will be:
#+begin_src
Store the size we want for the image in a variable 
Use pygame.image.transform to resize the image.
#+end_src
- Add these lines of code to the top of your program, under =player1XY = [100, 100]= over at line 18 (these lines don't need to be indented):
#+begin_src python
player1ImageSizeXY = [80, 60]
player1Image = pygame.transform.scale(player1Image, player1ImageSizeXY)
#+end_src
- The code will read something like this:
[[./img/5-4.PNG]]
- As we know the size of the image, we can use this to correct the mouse point position from our bug list. Consider the image below, which shows the current situation in our PyGame window, but with some dimensions drawn over the top of logo and the mouse pointer:
[[./img/5-6.png]]
- The image is currently being drawn on the screen starting at (120, 90) which is where the mouse pointer is. This is the top-left corner of the image. 
- To get the image to centre up, we need to tell PyGame to draw the image a bit further to the left, and a bit further up. How much, though?
- The width of our image (in pixels) is always stored in the variable called *player1ImageSizeXY[]*. When we want the X position, we use *player1ImageSizeXY[0]* and when we want the Y position, we use *player1ImageSizeXY[1]*. 
- Just thinking about the X position first, we need to draw the image at where the mouse currently is (/On the X axis; 120 pixels across in this example/), then...
- Half the width of the image over to the left (/50 pixels in this case/). 
- The same idea applies to the Y axis.
- Our formula is:
#+begin_src
new X Position = Mouse X position - (width of the image / 2)
new Y Position = Mouse Y position - (height of the image / 2)
#+end_src
- So in the example from the image, it'd be:
#+begin_src
new X Position = Mouse X position - (width of the image / 2)
new X Position = 120 - (100 / 2) = 120-50 = 70

new Y Position = Mouse Y position - (height of the image / 2)
new Y Position = 90 - (100 / 2) = 90 - 50 = 40
#+end_src
- To deal with this for any mouse position, we'll need this algorithm, which uses the variables available in our program:
#+begin_src
newXPosition = mousePosition[0] - (player1ImageSizeXY[0] / 2)
newYPosition = mousePosition[1] - (player1ImageSizeXY[1] / 2)
player1XY = newXPosition, newYPosition

DRAW PLAYER1 AT LOCATION player1XY
#+end_src
- Around line 32 in your program, you'll have a line of code saying:
#+begin_src python 
player1XY = mousePosition[0], mousePosition[1]
#+end_src
- Remove this line, and replace it with our improved version:
#+begin_src python 
newXPosition = mousePosition[0] - (player1ImageSizeXY[0] / 2)
newYPosition = mousePosition[1] - (player1ImageSizeXY[1] / 2)
player1XY = newXPosition, newYPosition
#+end_src
- Run your code, and test that the image is now centred on the mouse pointer.
- If you're unsure of any of the steps above, a video tutorial running through this lesson can be seen below. 
#+BEGIN_HTML
<iframe width="650" height="393" src="https://www.youtube.com/embed/GIH4srUh-7I" frameborder="0" allowfullscreen></iframe>
#+END_HTML
** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:
- *Silver:* Add comments to your code, describing how using image size is useful in correcting the mouse pointer position.
- *Gold:* Replace the image below as your sprite, remembering that it has a different aspect ratio, so you'll need to adjust the size of the image to ensure it doesn't look squashed. Explain in a text file why is it better to store the image X and Y size in variables. 
[[./doc/bird1.png]]
- *Platinum:* Use [[https://www.gimp.org/][gimp2]] to cut out an image from either of the sprite sheets below and add an [[https://en.wikipedia.org/wiki/Alpha_compositing][alpha]] layer. Use this as your player image instead.
[[./doc/birdSprites.png]]
[[./doc/MarioSprites.png]]
- A video tutorial on using alpha in Gimp can be found below.
#+BEGIN_HTML
<iframe width="650" height="393" src="https://www.youtube.com/embed/lhKtGxxESKo" frameborder="0" allowfullscreen></iframe>
#+END_HTML
